
	/** Error margin used when comparing 2 probability values */
	public static final float PROB_ERROR_MARGIN = 0.0001f;
	
	/** How many digits in the fractional portion of the probabilities generated by {@link #generateEdit(Long, int, int, List, List, FivePointTestType)} */
	public static final long PROB_FRACTIONAL_DIGITS = 4;
	
	/** If true, {@link #PROB_FRACTIONAL_DIGITS} will be used to round the edits. */
	private static boolean isToRoundEdit = true;

	/** Error margin used when comparing 2 probability values. {@link CPTBruteForceMarkovEngine} have less precision. */
	public static final float RELAXED_PROB_ERROR_MARGIN = 0.0005f;
	
	public static final float RELAXED_EDITLIMIT_ERROR_MARGIN = 0.005f;
		
	/** Error margin used when comparing 2 asset (score) values */
	public static final float ASSET_ERROR_MARGIN = 1f;	

	/** Error margin used when comparing 2 asset (score) values. {@link CPTBruteForceMarkovEngine} have less precision.*/
	public static final float ASSET_ERROR_MARGIN_CPT_BRUTE_FORC = 5f;

	private static final int MAX_USER_NUM = 10;

	private static final double MAX_CASH_TO_ADD = 200;

	/** What questions were added during a void iteration (iteration which is cancelled because a trade is impossible) */
	private List<Integer> addedQuestionsStateSizeInVoidIteration = null;
	
	/** Number of states of questions added during a void iteration (iteration which is cancelled because a trade is impossible) */
	private List<Long> addedQuestionsInVoidIteration = null;

	
	private List<MarkovEngineImpl> engines;

	/** This value indicates how many test iterations (5-point tests) will be performed by default*/
	private static int howManyTradesToTest = 1000;


	private enum FivePointTestType {BELOW_LIMIT, ON_LOWER_LIMIT, BETWEEN_LIMITS, ON_UPPER_LIMIT, ABOVE_LIMIT}; 
	
	/** File names to be used in {@link #testFiles()} and {@link #testFilesWithResolution()}  */
	private static String[] fileNames = {"disconnected.net" , "fullyConnected.net", "fullyDisconnected.net"};
//	private static String[] fileNames = {"disconnected.net" };
//	private static String[] fileNames = {"fullyConnected.net"};
//	private static String[] fileNames = {"fullyDisconnected.net"};

	/** File name to be used in {@link #testFilesWithResolutionSingleEngine()} */
	private static String fileNameToUseInTestFilesWithResolutionSingleEngine = "bn20_tw5_max41_bn20_tw10_max31.net";
	
	/** If true, the 4-points which causes 0 or negative assets in a 5-point test will be run. */
	private static  boolean isToRun5PointTestInStructureTest = false;

	/** {@link #tracer} will pring node names starting with this prefix */
	public static final String NODE_NAME_PREFIX = "N";

	/** This program will enter in a loop at this iteration number. Use with care. Set to negative if you don't want this program to stop at the iteration */
	private static final int iterationToDebug = -307;

	/** this object will group the data to be printed out in {@link #testFilesWithResolution()} */
	private Tracer tracer = null;

	/** Probability to revert trades */
	private static float probToRevert = 0f;

	/** probability to resolve a question */
	private static float probResolve = 0.03f;//0.1f;

	/** probability to balance a trade */
	private static float probToBalance = 0.03f;

	/** probability to add cash */
	private static float probToAddCash = .2f;

	/** If true, some test results and test specifications will be printed out by {@link #tracer} */
	private static boolean isToTrace = true;

	/** This is the probability that if trade is chosen to be {@link FivePointTestType#BETWEEN_LIMITS}, it is very close to the limits */
	private static float probNearEditLimitBias = 0.6f;

	/** This is the probability that {@link #runRandomTest(Network, List, List)} will not choose {@link FivePointTestType#BETWEEN_LIMITS} to trade */
	private static float probTradeOutsideLimit = 0.0f;

	/** If true, cash on edit limit will also be tested and continued, besides of the 5 point test. */
	private boolean isToCheckAssetsPreciselyOnLimit = false;

	/** If true, assets and probabilities before and after {@link #createNode(Long, Network, List, List, List, Collection)} will be compared */
	private boolean isToCompareValuesBeforeAndAfterCreateNode = true;//false;

	/** If true, {@link MarkovEngineImpl#doBalanceTrade(Long, Date, String, long, long, List, List)} of 
	 * {@link #runRandomTestSingleEngine(Network, List)} will balance the question entirely (consider all possible assumptions) */
	private static boolean isToForceBalanceQuestionEntirely = true;

	/** If true, {@link #testFilesWithResolutionSingleEngine()} will call {@link #createNodesInMarkovBlanket(Long, Network, List, List, List, Collection)}
	 * instead of {@link #createNode(Long, Network, List, List, List, Collection)} */
	private static boolean isToAlwaysCreateMarkovBlanket = false;//true;

//	/** Potentials of cliques containing these nodes will be printed in {@link #createNode(Long, Network, List, List, List, Collection)}*/
//	private static long[] nodesToTraceCliquePotentials = null;//{26L,38L};	// null;

	/** If false, consistency assertion in 5 point test will be skipped (this is useful if your objective is only to print test traces) */
	private static boolean isToAssertConsistencyIn5PointTest = false;//true;

	/** Maximum quantity of nodes to be alive in this test. If the quantity of nods reaches this value, no new nodes will be created */
	private static int maxLiveNodes = 7;

	/** This is the index of {@link #engines} to be used as the sole engine to be run in {@link #testFilesWithResolutionSingleEngine()}.
	 * Negative values will be interpreted as "the last element in the list" */
	private static int indexOfEngineToUseInTestFilesWithResolutionSingleEngine = -1;

	/** If false, infinite assets will not be compared */
	private static boolean isToCompareInfiniteExpectedScore = true;

	/** If {@link #generateEdit(Long, int, int, List, List, FivePointTestType, Long, List, List)} generates a big edit,
	 * the edit will not set the probabilities to less than 0+{@link #probDistanceFromDeterministicValues} or 1-{@link #probDistanceFromDeterministicValues}.
	 * @see #minProbDiffOfBigEdit
	 * @see #probBigEdit
	 *  */
	private static float probDistanceFromDeterministicValues = 0.005f;//0f;

	/** This value is considered to be a big change in probability
	 * @see #probBigEdit */
	private static float minProbDiffOfBigEdit = .6f;//0f;

	/** Prob of {@link #generateEdit(Long, int, int, List, List, FivePointTestType, Long, List, List)} to make a change a big change in current prob
	* @see #minProbDiffOfBigEdit */
	private static float probBigEdit = .4f;//0f;


	/** If the program iterated more than this quantity in order to generate the edit, it considers that it could not generate a consistent edit */
	private static int maxIterationToGenerateEdit = 50;
	
	/** If the program iterated more than this quantity in order to choose the question to edit, the test will fail */
	private static int maxIterationToSelectQuestion = 1000/maxLiveNodes;

	/** If true, the cash will be tested after a balance trade */
	private static boolean isToCheckCashAfterBalance = false;

	/** if true, the 1st engine in {@link #engines} will contain all nodes from {@link #fileNames} from the beginning. */
	private static boolean isToSet1stEngineToContainAllNodes = true;

	/** If there are less than this number of questions, questions will not be resolved */
	private static int minAliveQuestionNumber = 0;

	private static long seed = 1352858447518L;//new Date().getTime();
	/** Random number generator, with seed */
	private static Random random = new Random(seed);

	/** 
	 * If true, {@link #do5PointTest(Map, Long, int, List, Long, List, List, FivePointTestType, Map, boolean, Collection, boolean)} will check
	 * whether cash went to negative without error margin, if {@link FivePointTestType} is {@link FivePointTestType#BETWEEN_LIMITS}.
	 */
	private static boolean isStrictlyNonNegativeCash = true;

	/**If true, {@link #generateEdit(Long, int, int, List, List, FivePointTestType, Long, List, List)} will randomize
	 * trades close to the edit limits*/
	private static boolean isToRandomizeTradeCloseToEdit = true;//false;

	/** {@link #generateEdit(Long, int, int, List, List, FivePointTestType, Long, List, List)} will attempt to generate edits
	 * which exceeds or equals to this value of difference compared to current probability */
	private static float probDiffToConsiderSufficientChange = 0.01f;
	
	/** If false, edit limit will be set to the default [0, 1] */
	private static boolean isToCalculateEditLimit = true;

	/** This is just a counter of how many edits went to the branch of edits close to limits */
	private static int numEditsCloseToLimits = 0;

	/** If the number of live questions reaches this number, the test suite will start to resolve questions with probability {@link #probResolve} */
	private static int minNumQuestionToTriggerResolveQuestion = 7; //0;
	
	